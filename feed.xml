<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://edimah.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://edimah.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-09-29T22:19:13+00:00</updated><id>https://edimah.github.io/feed.xml</id><title type="html">blank</title><subtitle>A personal website combining my projects, and bits and pieces to share my understanding of many fields. </subtitle><entry><title type="html">How to import and parse Apple Health data with R</title><link href="https://edimah.github.io/blog/2025/importing-and-visualising-fitness-data/" rel="alternate" type="text/html" title="How to import and parse Apple Health data with R"/><published>2025-09-26T22:34:16+00:00</published><updated>2025-09-26T22:34:16+00:00</updated><id>https://edimah.github.io/blog/2025/importing-and-visualising-fitness-data</id><content type="html" xml:base="https://edimah.github.io/blog/2025/importing-and-visualising-fitness-data/"><![CDATA[<p>I‚Äôve been using my iPhone and Apple Watch‚Äôs health features consistently for almost <strong>two years</strong> now.<br/> That‚Äôs more than <strong>20 months</strong> of all sorts of logs (workouts, heart rates, daily activity summaries‚Ä¶) just sitting on my phone.</p> <p>This treasure trove of personal data has always intrigued me. With it, I could answer many questions about the way my body works, to change the way I train, how I manage load, rest days, etc.</p> <p>But before answering any fitness questions, I first had to answer an obvious technical one :</p> <blockquote> <p><strong>How do I get all that data into a clean, usable format?</strong></p> </blockquote> <p>That‚Äôs what my <a href="https://github.com/Edimah/apple-health-data"><strong>Apple Health Data GitHub repo</strong></a> is about. Here‚Äôs what it does.</p> <hr/> <h3 id="1-export-the-data">1. Export the data</h3> <p>From the Apple Health app.</p> <ol> <li>Click <em>Profile</em></li> <li>Click <em>Export Health Data</em></li> </ol> <p>Unzipping it reveals this folder.</p> <p><img src="/assets/img/apple_health_export_folder.png" alt="Health Export Folder" title="Health Export Folder" style="max-width: 100%; height: auto;"/></p> <p>It‚Äôs full of workout logs, heart rates, activity summaries, ECGs, GPS routes‚Ä¶ A treasure trove as I said. But not very readable by the human eye so far.</p> <p>The meat of the export is in the two XML files which both contain the same information (<code class="language-plaintext highlighter-rouge">export_cda.xml</code> just follows <em>Clinical Data Architecture</em> standards favoured by some administrations). The file <code class="language-plaintext highlighter-rouge">export.xml</code> is a good place to start. Only issue is, it looks like this :</p> <p><img src="/assets/img/apple_health_xml_preview.png" alt="Export XML preview" title="Export XML preview" style="max-width: 100%; height: auto;"/></p> <hr/> <h3 id="2-parse--clean-it">2. Parse &amp; clean it</h3> <p>Thankfully, R has appropriate tools to deal with this format and extract information from this word soup. The R script <code class="language-plaintext highlighter-rouge">01_import_health_data.R</code> does the following :</p> <ul> <li>Parse the XML with <code class="language-plaintext highlighter-rouge">xml2</code>.</li> <li>Isolate the nodes of interest (I picked <code class="language-plaintext highlighter-rouge">Workout</code>, <code class="language-plaintext highlighter-rouge">WorkoutStatistics</code>, and <code class="language-plaintext highlighter-rouge">ActivitySummary</code>).</li> <li>Convert them into <strong>tibbles</strong> dataframes.</li> <li>Transform dates and numbers into proper date-time and numeric R objects.</li> <li>Clean up the names by removing useless prefixes (e.g. <code class="language-plaintext highlighter-rouge">HKWorkoutActivityTypeYoga</code> ‚Üí <code class="language-plaintext highlighter-rouge">Yoga</code>).</li> </ul> <p>There. Megabytes of XML file neatly distilled into a few tidy CSV files, a format R handles well. It also saves us the pain &amp; computing power from having to ‚Äúimport-parse-clean‚Äù the data all over again.</p> <hr/> <h3 id="3-have-fun-with-the-results">3. Have fun with the results</h3> <p>With a solid data pipeline in place, sky‚Äôs the limit really‚Ä¶</p> <p>The second script, <code class="language-plaintext highlighter-rouge">02_visualise_health_data.R</code>, loads those CSVs and builds interactive plots with <code class="language-plaintext highlighter-rouge">ggplot2</code> + <code class="language-plaintext highlighter-rouge">plotly</code>.</p> <p>I made a <strong>bar plot</strong> of my workout distribution as an example. Hover to see counts for each activity:</p> <iframe src="/assets/html/workout_types_20250926_221543.html" width="100%" height="600" frameborder="0"></iframe> <hr/> <p>This graph alone doesn‚Äôt say much about performance or trends, but it does offer a bit of a surprise insight: yoga dominates my routine üßòüèø‚Äç‚ôÄÔ∏è. Sprinkling short flows before and after other workouts adds up !</p> <p>My next step will be to explore trends in heart rates, recovery and load. A good opportunity to explore R‚Äôs time series capabilities.</p>]]></content><author><name></name></author><category term="posts"/><category term="dataviz"/><category term="fitness"/><category term="health"/><summary type="html"><![CDATA[I imported and parsed 20 months of Apple Health data üèÉüèø‚Äç‚ôÄÔ∏è to get a broader view of how I trained.]]></summary></entry></feed>